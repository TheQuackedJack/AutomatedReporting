import subprocess
from pathlib import Path

class ReportEngineManager:
    def __init__(self, tar_file_dir: str, config_dir: str):
        """
        Initialize the manager with paths for tar files and configurations.

        Args:
            tar_file_dir (str): Directory where Docker tar files are stored.
            config_dir (str): Directory where configuration files are stored.
        """
        self.tar_file_dir = Path(tar_file_dir)
        self.config_dir = Path(config_dir)

        # Ensure directories exist
        if not self.tar_file_dir.exists():
            raise FileNotFoundError(f"Tar file directory not found: {self.tar_file_dir}")
        if not self.config_dir.exists():
            raise FileNotFoundError(f"Config directory not found: {self.config_dir}")

    def load_docker_image(self, image_name: str):
        """
        Load a Docker image from a tar file.

        Args:
            image_name (str): The name of the image to load (e.g., 'sales-report-engine').
        """
        tar_file = self.tar_file_dir / f"{image_name}.tar"

        if not tar_file.exists():
            raise FileNotFoundError(f"Docker image tar file not found: {tar_file}")

        # Load the Docker image
        try:
            subprocess.run(["docker", "load", "-i", str(tar_file)], check=True)
            print(f"Docker image '{image_name}' loaded successfully.")
        except subprocess.CalledProcessError as e:
            raise RuntimeError(f"Failed to load Docker image: {e}")

    def run_report_engine(self, image_name: str, config_file_name: str, output_file: str):
        """
        Run a Docker container for the specified image and configuration.

        Args:
            image_name (str): The name of the Docker image to run.
            config_file_name (str): The name of the configuration file (in the config directory).
            output_file (str): Path to save the report generated by the container.
        """
        config_file = self.config_dir / config_file_name

        if not config_file.exists():
            raise FileNotFoundError(f"Configuration file not found: {config_file}")

        # Run the Docker container
        try:
            subprocess.run(
                [
                    "docker", "run",
                    "-v", f"{self.config_dir}:/app/config",  # Mount config directory
                    "-v", f"{Path(output_file).parent}:/app/output",  # Mount output directory
                    image_name,
                    "-c", f"/app/config/{config_file_name}",
                    "-o", f"/app/output/{Path(output_file).name}"
                ],
                check=True
            )
            print(f"Report generated successfully: {output_file}")
        except subprocess.CalledProcessError as e:
            raise RuntimeError(f"Failed to run Docker container: {e}")
